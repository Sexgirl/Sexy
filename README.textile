h2. Sexy.js

"View the Demo at SexyJS.com":http://sexyjs.com/demos/comments/

*Sexy.js* is a lightweight JavaScript library which provides a sleek facade and enhanced Sequential Ajax (Sajax) functionality to jQuery's native Ajax methods.

*Sequential Ajax*, or *Sajax*, is an Ajax design pattern where related asynchronous XMLHttpRequests are made simultaneously and their callbacks fired in a specified sequence, regardless of the order in which they return, with each callback function receiving the return value of the previous callback function as an additional argument.

The Sajax pattern simplifies and speeds the loading of scripts, stylesheets, and data, while facilitating the combination and manipulation of data from multiple sources without complicated workarounds to handle the implicit timing issues of Ajax's asynchronous nature.

And Sexy.js makes it look good.

Damn good.

h3. Ugly

<pre><code><script src="/js/jquery.template.min.js" type="text/javascript" charset="utf-8"></script>
<link rel="stylesheet" href="css/comments.css" type="text/css" media="screen" charset="utf-8"/>

<script type="text/javascript" charset="utf-8">

$.get('comments.tpl', function (tpl) {
  $.getJSON('comments.json', function (data) {
    $.template(tpl, data).appendTo('#comments');
  });
});

</script>
</code></pre>

h3. Sexy

<pre><code><script type="text/javascript" charset="utf-8">

Sexy
  .js('/js/jquery.template.min.js')
  .css('css/comments.css')
  .text('comments.tpl')
  .json('comments.json', function (data, status, tpl) {
      $.template(tpl, data).appendTo('#comments');
  });
  
</script>
</code></pre>

Sexy provides a chainable API for loading each of the data types supported by jQuery's native Ajax methods:

* *html* (url, callback)
* *json* (url, callback)
* *jsonp* (url, callback)
* *script* (url, callback)
* *text* (url, callback)
* *xml* (url, callback)

as well as one additional method for loading CSS (local file access only):

* *style* (url, callback)

and two aliases for sex appeal:

* *js* (url, callback) // -> script
* *css* (url, callback) // -> style

Each of the above methods can take either a url and optional callback as argument or a single ajaxSetup config object (see jQuery documentation).

All callbacks receive three arguments: *data* and *status* (from jQuery's native functionality) and *previous* which is the return value of the previously executed callback.

_If no callback is supplied for any of the data carrying calls (*html*, *json*, *jsonp*, *text*, *xml*), a pass-through function automagically returns the request data to the next callback.

If no callback is supplied for the two non-data carrying calls (*script*/*js*, *style*/*css*) or *setup*, a pass-through function automagically returns the most recently returned value._

You can also set a default configuration for successive calls:

* *setup* (_cfg_)

*setup* can be used anywhere in the chain to change the default configuration. Passing no arguments will remove any previously configured options.

Sexy also has an additional method for bundling packaged scripts:

* *bundle* (url _, url2, ..., callback_)

The bundle method loads multiple scripts as text and, once all requests are complete, makes a single script injection, and then fires the optional callback. This method is useful for maintaining JavaScript in packages in an environment that doesn't support or necessitate a server-side bundling solution.

h3. More examples

h4. Binding
<pre><code>Sexy
  .json('ticketingData.json', function (data) {
    return data.ticketingInfo;
  })
  .json('gameData.json', function (data, status, ticketingInfo) {
    for (var i = 0, n = data.games.length; i < n; ++i) {
      data.games[i].ticketingInfo = ticketingInfo[data.games[i].id];
    }
    // render games...
  });
</code></pre>

h4. Bootstrapping
<pre><code>Sexy
  .js('js/jquery.template.min.js')
  .css('css/comments.css')
  .text('comments.tpl', function (data, status, previous) {
    return data;
  })
  .json({
    url: 'comments.json',
    data: { articleId: 123 },
    success: function (data, status, previous) {
      $.template(previous, data).appendTo('#comments');
    }
  });
</code></pre>

h4. Bundling
<pre><code>Sexy
  .bundle(
    'mlb.js',
    'mlb.stats.js',
    'mlb.stats.widget.js',
    'mlb.stats.widget.LeagueSelector.js',
    'mlb.stats.widget.StatTypeSelector.js',
    'mlb.stats.app.js',
    'mlb.stats.app.SortableStats.js',
    function () {
      mlb.stats.app.SortableStats.init();
    }
  );
</code></pre>

h3. History

The original goal when designing $.sajax, the predecessor to Sexy, was a simple pattern for executing and handling multiple Ajax requests. But by building upon jQuery's robust Ajax framework, $.sajax also coincidentally achieved the goal of parallel asynchronous script loading, a performance optimization similar to those found in Kyle Simpson's "LABjs":http://labjs.com/ and Steve Souders' "EFWS":http://stevesouders.com/efws/. However, neither $.sajax nor Sexy are currently designed for optimal performance. For pure performance, use either of these two more mature examples. Sexy's dependency on jQuery results in a slight performance hit. For convenience and style with substance, use Sexy.js.

NOTE: The library is just entering beta, but _is_ currently in use on MLB.com's 2010 website (in development). Stay tuned for more...
